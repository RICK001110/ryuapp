# -*- coding:utf-8 -*-
import json
import logging
import struct
import threading
import sys
import string
import socket
from time import ctime,sleep,time,strftime,localtime
import networkx as nx
from Queue import Queue
import xml.dom.minidom
#import multhreading1
from operator import attrgetter
from ryu import cfg
from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER, DEAD_DISPATCHER
from ryu.controller.handler import CONFIG_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ipv4
from ryu.lib.packet import ipv6
from ryu.lib.packet import arp
from ryu.lib import hub
import multhreading_new
from webob import Response
from ryu.app.wsgi import ControllerBase, WSGIApplication, route

simple_WIAPA_instance_name = 'simple_WIAPA_api_app'
url = '/simpleWIAPA/commands'

class WIAPAScheduling(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
    _CONTEXTS = {'wsgi': WSGIApplication}
    def __init__(self, *args, **kwargs):
        super(WIAPAScheduling, self).__init__(*args, **kwargs)
        self.msg = None
        self.q = []
        self.req = []
        self.panid = []
        self.shortaddr = []
        self.topo = []
        wsgi = kwargs['wsgi']
        wsgi.register(SimpleWIAPAController, {simple_WIAPA_instance_name : self})
        t = threading.Thread(target = self.TCPServer,args=(self.q,self.req,1))
        t.start()
#        print "%s" %self.q

    @set_ev_cls(ofp_event.EventWIAPACommandIn, MAIN_DISPATCHER)
    def get_command_info( self, ev ):
        msg = ev.msg
        print "%s" %msg
        self.panid.append(int(msg['src']['panid']))
        self.panid.append(int(msg['dst']['panid']))
        
        self.shortaddr.append(int(msg['src']['shortaddr']))
        self.shortaddr.append(int(msg['dst']['shortaddr']))
        
        print "获取PANID为%d的WIA-PA网络的信息".decode('gbk').encode('utf-8') %self.panid[0]
        self.q[self.panid[0] - 1].put(["gettopo"],1)
        self.topo.append(self.req[self.panid[0] - 1].get(1))        
        print "PANID为%d的WIA-PA网络拓扑信息为%s".decode('gbk').encode('utf-8') %(self.panid[0], self.topo[self.panid[0] - 1])
        print "获取PANID为%d的WIA-PA网络的信息".decode('gbk').encode('utf-8') %self.panid[1]
        self.q[self.panid[1] - 1].put(["gettopo"],1)
        self.topo.append(self.req[self.panid[1] - 1].get(1))  
        print "PANID为%d的WIA-PA网络拓扑信息为%s".decode('gbk').encode('utf-8') %(self.panid[1], self.topo[self.panid[1] - 1])
        print "获取短地址为%d的WIA-PA网络设备的信息".decode('gbk').encode('utf-8') %self.shortaddr[0]
        print "获取短地址为%d的WIA-PA网络设备的信息".decode('gbk').encode('utf-8') %self.shortaddr[1]
        
        print "计算路径".decode('gbk').encode('utf-8')
        print "下发路径".decode('gbk').encode('utf-8')
        
        event_WIAPA_Path_Calculation = ofp_event.EventWIAPAPathCalculation(msg)
        self.event_brick_2 = app_manager.lookup_service_brick('ofp_event')
        self.event_brick_2.send_event_to_observers(event_WIAPA_Path_Calculation, MAIN_DISPATCHER)
        return
    def setroutetablexml(self, managerList):  #构造路由表XML

        doc = xml.dom.minidom.Document()
        root = doc.createElement('routetable')  #设置根节点的属性
        root.setAttribute('xmlns', 'cquptSDN:routetable')   
        #将根节点添加到文档对象中
        doc.appendChild(root)
       
        nodeManager = doc.createElement('num')
        nodeManager.appendChild(doc.createTextNode('name'))
        root.appendChild(nodeManager)

        for i in managerList[1:]:
            a=i.keys()
            nodeManager = doc.createElement('route')
            nodeName = doc.createElement('ID')
            #给叶子节点name设置一个文本节点，用于显示文本内容
            nodeName.appendChild(doc.createTextNode(str(i['ID'])))
      
            nodeAge = doc.createElement("src")
            nodeAge.appendChild(doc.createTextNode(str(i["src"])))
      
            nodeSex = doc.createElement("dst")
            nodeSex.appendChild(doc.createTextNode(str(i["dst"])))
           #将各叶子节点添加到父节点Manager中，
           #最后将Manager添加到根节点Managers中
            nodeManager.appendChild(nodeName)
            nodeManager.appendChild(nodeAge)
            nodeManager.appendChild(nodeSex)
            root.appendChild(nodeManager)
      #开始写xml文档
      #fp = open('xc', 'w')
      #idoc.writexml(fp, indent='\t', addindent='\t', newl='\n', encoding="utf-8")
        return  doc.toprettyxml()
    def net_manager(self, value):
        data = ''
        if value[0] == 'gettopo':   
            data_1 = "GET /network-topology HTTP\n"
            data_2 = data_1 + "Accept:application/xml\n"
            data_3 = data_2 + "Authentication:\n"
            data  = data_3 + " Content-Length:0"
        elif value[0]  == 'getdeviceinfo':
            data_1 = "GET /device/address/info HTTP/1.1\n"
            data_2 = data_1 + "Accept:application/xml\n"
            data_3 = data_2 + "Authentication:\n"
            data   = data_3 + "Content-Length:0"
        elif value[0] == 'getdevicelist':
            data_1 ="GET /device/HTTP/1.1\n"
            data_2 = data_1 + "Accept:application/xml\n"
            data_3 = data_2 + "Authentication:\n"
            data   = data_3 + "Content-Length:0"
        elif value[0] == 'getdeviceUAO':
            data_1 = "GET /device/shortaddress/uao HHTP/1.1"
            data_2 = data_1 + "Accept:application/xml\n"
            data_3 = data_2 + "Authentication:\n"
            data   = data_3 + "Content-Length:0"
        elif value[0] == 'setroutetable':      
            doc = self.setroutetablexml(value)          
            data_1 = "PUT /device/shortaddress/routetable HTTP/1.1"
            data_2 = data_1 + "Accept:application/xml\n"
            data_3 = data_2 + "Authentication:\n"
            data_4 = data_3 + "Content-Length:\n" 
            data = data_4 + doc
        return data
    def net_connect(self, c,q,req):
        while True:
            try:
              #  print len(q.get(1))
                stri = q.get(1)
                print "获取到命令%s".decode('gbk').encode('utf-8') %stri
                data = self.net_manager(stri)
                c.sendall(data)
            except:
                flag = 1
            else:
                redata = c.recv(1024)
                print "接收到回复%s".decode('gbk').encode('utf-8') %redata
                req.put(redata,1)
    def TCPServer(self, q, req, Threadname): 
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind(('', 8078))
        s.listen(5)
        i = 0
        while True:       
            c,addr = s.accept()
            print strftime('%Y-%m-%d %H:%M:%S', localtime(time())) + "一个WIA-PA系统管理器连接到控制器".decode('gbk').encode('utf-8')
            q.append(Queue(100))
            req.append(Queue(100))
            t3 = threading.Thread(target=self.net_connect,args=(c,q[i],req[i]))
            t3.start()
            sleep(1)
            i=i+1
#        self.queue_get = hub.spawn(self._queue_get)
#        self.TCP_server = hub.spawn(multhreading_new)

class SimpleWIAPAController(ControllerBase):
    
    def __init__(self, req, link, data, **config):
        super(SimpleWIAPAController, self).__init__(req, link, data, **config)
        self.simple_WIAPA_app = data[simple_WIAPA_instance_name]

    @route('simpleWIAPA', url, methods=['PUT'])
    def put_mac_table(self, req, **kwargs):
        print "I get a info"
        simple_switch = self.simple_WIAPA_app
        print "%s" %req.body
        new_entry = eval(req.body)
        print "%s" %new_entry['src']['ip']
        event_WIAPA_Command_In = ofp_event.EventWIAPACommandIn(new_entry)
        self.event_brick = app_manager.lookup_service_brick('ofp_event')
        self.event_brick.send_event_to_observers(event_WIAPA_Command_In, MAIN_DISPATCHER)
#        try:
            
#        body = json.dumps(new_entry)
#        print "%s" %body
#        return Response(content_type='application/json', body=body)
#        except Exception as e:
#            return Response(status=500)
#@set_ev_cls(ofp_event.EventWIAPAPathCalculation, MAIN_DISPATCHER)
#def Event_Test(self, ev):
#msg = ev.msg
#self.logger.info("%s" %msg)
